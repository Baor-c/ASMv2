@model ASM1.Models.Combo
@{
    ViewData["Title"] = Model.TenCombo;
}

<div class="min-h-screen bg-white py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Combo Image -->
            <div class="animate-fade-in">
                <div class="aspect-w-1 aspect-h-1 w-full overflow-hidden rounded-lg shadow-lg">
                    <img src="data:image/png;base64,@Convert.ToBase64String(Model.HinhAnh ?? new byte[0])" alt="@Model.TenCombo" class="w-full h-full object-cover" />
                </div>
            </div>

            <!-- Combo Details & Form -->
            <div class="animate-slide-up">
                <h1 class="text-3xl font-bold text-gray-900 mb-2">@Model.TenCombo</h1>
                <p class="text-gray-600 mb-4">@Model.MoTa</p>
                <p class="text-3xl font-bold text-red-600 mb-6">@Model.Gia.ToString("N0")đ</p>

                <!-- Included Items -->
                <div class="mb-6">
                    <h3 class="font-semibold text-gray-900 mb-3">Bao gồm các món:</h3>
                    <div class="space-y-3">
                        @if (Model.ChiTietCombos != null && Model.ChiTietCombos.Any())
                        {
                            @foreach (var detail in Model.ChiTietCombos)
                            {
                                        <div class="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                                            <div class="w-12 h-12 rounded-lg overflow-hidden flex-shrink-0">
                                                <img src="data:image/png;base64,@Convert.ToBase64String(detail.MonAn.HinhAnh ?? new byte[0])" alt="@detail.MonAn.TenMonAn" class="w-full h-full object-cover" />
                                            </div>
                                            <p class="font-medium text-sm">@detail.MonAn.TenMonAn</p>
                                        </div>
                            }
                        }
                        else
                        {
                                <p class="text-sm text-gray-500">Chưa có thông tin chi tiết về các món trong combo này.</p>
                        }
                    </div>
                </div>

                <!-- Add to Cart -->
                <div class="mb-6">
                    <div class="flex items-center space-x-4">
                        <label class="block text-sm font-medium text-gray-700">Số lượng</label>
                        <div class="flex items-center">
                            <button id="decreaseQuantity" class="w-8 h-8 bg-gray-200 rounded-l flex items-center justify-center hover:bg-gray-300 transition-colors">
                                <i data-lucide="minus" class="h-4 w-4"></i>
                            </button>
                            <input type="number" id="comboQuantity" value="1" min="1" max="10" 
                                   class="w-12 text-center border-y border-gray-300 h-8 focus:outline-none">
                            <button id="increaseQuantity" class="w-8 h-8 bg-gray-200 rounded-r flex items-center justify-center hover:bg-gray-300 transition-colors">
                                <i data-lucide="plus" class="h-4 w-4"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <button onclick="addToCartWithQuantity()" class="w-full bg-red-600 text-white py-3 rounded-lg font-semibold hover:bg-red-700 transition-colors flex items-center justify-center">
                    <i data-lucide="shopping-cart" class="h-5 w-5 mr-2"></i>
                    Thêm vào giỏ hàng
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        lucide.createIcons();
        
        // Quantity controls
        document.getElementById('decreaseQuantity').addEventListener('click', function() {
            let currentQty = parseInt(document.getElementById('comboQuantity').value);
            if (currentQty > 1) {
                document.getElementById('comboQuantity').value = currentQty - 1;
            }
        });
        
        document.getElementById('increaseQuantity').addEventListener('click', function() {
            let currentQty = parseInt(document.getElementById('comboQuantity').value);
            if (currentQty < 10) {
                document.getElementById('comboQuantity').value = currentQty + 1;
            }
        });
        
        // Add to cart with specific quantity
        function addToCartWithQuantity() {
            const id = @Model.MaCombo;
            const quantity = parseInt(document.getElementById('comboQuantity').value);
            
            fetch(`/Cart/QuickAdd?id=${id}&quantity=${quantity}&isCombo=true&redirectToCart=false`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateCartCount(data.cartCount);
                        showNotification('Đã thêm combo vào giỏ hàng!', 'success');
                    } else {
                        showNotification('Không thể thêm vào giỏ hàng', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Có lỗi xảy ra', 'error');
                });
        }
        
        // Simple notification function
        function showNotification(message, type) {
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg text-white shadow-lg transform transition-transform duration-300 ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.transform = 'translateX(0)';
            }, 100);
            
            setTimeout(() => {
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }
        
        // Function to update cart count
        function updateCartCount(count) {
            const cartCountElement = document.getElementById('cart-count');
            if (!cartCountElement) return;
            
            if (count !== undefined) {
                cartCountElement.textContent = count;
                cartCountElement.classList.remove('hidden');
            } else {
                fetch('@Url.Action("GetCartCount", "Cart")')
                    .then(response => response.json())
                    .then(data => {
                        if (data.count > 0) {
                            cartCountElement.textContent = data.count;
                            cartCountElement.classList.remove('hidden');
                        } else {
                            cartCountElement.classList.add('hidden');
                        }
                    })
                    .catch(err => console.error('Error fetching cart count:', err));
            }
        }
    </script>
}
